#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var serialport = require('serialport');
const Readline = require('@serialport/parser-readline');

var Directions = {
    Center: "CENTER",
    North: "NORTH",
    NorthEast: "NORTHEAST",
    NorthWest: "NORTHWEST",
    South: "SOUTH",
    SouthEast: "SOUTHEAST",
    SouthWest: "SOUTHWEST",
    East: "EAST",
    West: "WEST",
}

function getPayload(controllerData) {
    let line = controllerData.toString('utf-8').replace(/(\r\n|\n|\r)/gm, "");
    let parts = line.split('|');

    return {
        direction: parts[0],
        percent: Number(parts[1]),
        rotation: Number(parts[2]),
        button: Boolean(parts[3]),
    }
}

const PORT = "/dev/ttyACM0";

console.log('waiting on joystick', PORT);

const port = new serialport(PORT, { autoOpen: false })

port.open(function (err) {
    if (err) {
        return console.log('Error opening port: ', err.message)
    }

    console.log('joystick opened');
    console.log('waiting on joystick data');
})

var waitingOnOK = false;

var writeToCNC = function(data) {
    console.log('GCODE', data.replace(/\r\n|\r|\n/gm, ""));
    // socket.emit('write', options.port, data);
}

const SMOOTH_JOG_COMMAND_INTERVAL = 15; // period in ms at which the $J jogging commands are sent to the machine
const MIN_SPEED = 1000;
const MAX_SPEED = 10000;
let smoothJogEnabled = false;
let currentDirection = null;
let currentAxis = null;
let currentThrow = 0;

function getMovement(joystickThrow) {
    let speed = 0;
    let step = 0;

    const windows = [
        {t: 0.2, speed: 1000, step: 0.5},
        {t: 0.3, speed: 2000, step: 0.75},
        {t: 0.4, speed: 2500, step: 1},
        {t: 0.5, speed: 3500, step: 1.5},
        {t: 0.6, speed: 4500, step: 1.5},
        {t: 0.7, speed: 5500, step: 1.5},
        {t: 0.8, speed: 6500, step: 1.75},
        {t: 0.9, speed: 7500, step: 2},
        {t: 1, speed: 8000, step: 2},
    ];

    for(const window of windows) {
        if(joystickThrow <= window.t) {
            return {
                speed: window.speed,
                step: window.step,
            }
        }
    }

    return {
        speed: 0,
        step: 0,
    }
}

setInterval(function() {
    if(!smoothJogEnabled) {
        return;
    }

    let movement = getMovement(currentThrow);
    let speed = movement.speed;
    let step = movement.step;

    var axisString = currentAxis.map(axis => axis + step).join(" ");

    console.log('smooth jog command', currentDirection, speed, currentAxis);
    writeToCNC(`$J=G91 G21 ${axisString} F${speed}\n`);
}, SMOOTH_JOG_COMMAND_INTERVAL);

const parser = port.pipe(new Readline({ delimiter: '\n' }));

parser.on("data", function(data) {
    var payload = getPayload(data);
    if(payload.direction === '') {
        return;
    }

    currentDirection = payload.direction;
    currentThrow = payload.percent;

    var stopSmoothJogging = function() {
        if(!smoothJogEnabled) {
            return;
        }

        let stop = function() {
            console.log("smooth jogging stopped")
            smoothJogEnabled = false;
            writeToCNC("\x85");
        }

        if(!waitingOnOK) {
            stop()
        } else {
            let interval = null;

            interval = setInterval(function() {
                if(waitingOnOK) {
                    return;
                }

                clearInterval(interval)
                stop()
            }, 10)
        }
    }

    var startSmoothJogging = function(...selectedAxis) {
        smoothJogEnabled = true;
        currentAxis = selectedAxis;
    }

    switch (currentDirection) {
        case Directions.Center:
            stopSmoothJogging();
            break;

        case Directions.North:
            startSmoothJogging("Y")
            break;

        case Directions.South:
            startSmoothJogging("Y-")
            break;

        case Directions.East:
            startSmoothJogging("X")
            break;

        case Directions.West:
            startSmoothJogging("X-")
            break;

        case Directions.NorthEast:
            startSmoothJogging("X", "Y")
            break;

        case Directions.NorthWest:
            startSmoothJogging("X-", "Y")
            break;

        case Directions.SouthEast:
            startSmoothJogging("X", "Y-")
            break;

        case Directions.SouthWest:
            startSmoothJogging("X-", "Y-")
            break;

        default:
            break;
    }
});
